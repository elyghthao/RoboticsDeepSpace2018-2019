// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588.DeepSpaceCode.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.DeepSpaceCode.Robot;

/**
 *
 */
public class Drive extends Command {
    private boolean boschedrive = false;
    private double left, right;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        left = 0;
        right = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        left = Robot.oi.getleftJoystick().getY();
        right = Robot.oi.getrightJoystick().getY();
        Robot.acquisition.setConfigMotorSpeed(Robot.oi.operatorJoystick.getRawAxis(3) * 0.5);

        // Robot.climbing.setLeftBackMoveMotor(-left*0.8);
        // Robot.climbing.setRightMoveMotor(-right*0.8);
        // Robot.climbing.setMiddleMoveMotor(-right);j                                 

        Robot.chassis.setRightMotor1Speed(right);
        Robot.chassis.setRightMotor2Speed(right);
        Robot.chassis.setLeftMotor1Speed(-left);  
        Robot.chassis.setLeftMotor2Speed(-left);

        
            // Robot.climbing.setLeftBackMoveMotor(-left *0.2);
            // Robot.climbing.setMiddleMoveMotor(right * 0.2);
            // Robot.climbing.setRightMoveMotor(right *0.2);

        // if (Robot.oi.rightJoystick.getRawButton(12)) {
        //     if (boschedrive == true) {
        //         boschedrive = false;
        //     } else {
        //         boschedrive = true;
        //     }
        //     Timer.delay(0.05);
        // }

        // if (boschedrive) {
        //     Robot.chassis.setRightMotor1Speed(right);
        //     Robot.chassis.setRightMotor2Speed(right);
        //     Robot.chassis.setLeftMotor1Speed(-left);
        //     Robot.chassis.setLeftMotor2Speed(-left);
        //     Robot.climbing.setLeftBackMoveMotor(-left);
        //     Robot.climbing.setMiddleMoveMotor(right);
        //     Robot.climbing.setRightMoveMotor(right);
        // }

        // if (right > 0.05 && right < -0.05) {
        //     Robot.chassis.setRightMotor1Speed(right);
        //     Robot.chassis.setRightMotor2Speed(right);
        // } else {
        //     Robot.chassis.setRightMotor1Speed(0.0);
        //     Robot.chassis.setRightMotor2Speed(0.0);
        // }

        // if (left > 0.05 && left < -0.05) {
        //     Robot.chassis.setLeftMotor1Speed(-left);
        //     Robot.chassis.setLeftMotor2Speed(-left);
        // } else {
        //     Robot.chassis.setLeftMotor1Speed(0.0);
        //     Robot.chassis.setLeftMotor2Speed(0.0);
        // }

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
