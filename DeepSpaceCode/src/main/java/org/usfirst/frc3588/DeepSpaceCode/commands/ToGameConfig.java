// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.DeepSpaceCode.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.DeepSpaceCode.Robot;

/**
 *
 */
public class ToGameConfig extends Command {
    private double encoderValue;
    private final double STOP = 0.0;
    private final double MOVE = 0.3;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ToGameConfig() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.acquisition);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        // Robot.acquisition.resetArmEncoder(); //robot should be in start config, reset encoder to read zero
        // Robot.acquisition.setConfigMotorSpeed(STOP); //make sure configuration motor it stopped
        //encoderValue = Robot.acquisition.getArmEncoder(); //get initial encoder value
        //if (encoderValue < 90) { //if encoder isn't in game configuration
        // Robot.acquisition.setConfigMotorSpeed(MOVE); //have configuration motor move
        //}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        //encoderValue = Robot.acquisition.getArmEncoder(); //keep checking encoder value to determine if arms in game config
        // if (encoderValue > 88 && encoderValue < 92) { //if encoder is within this range, stop the configuration motor
        //     Robot.acquisition.setConfigMotorSpeed(STOP);
        //     return true; //call the end() method
        // }
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        // Robot.acquisition.setConfigMotorSpeed(STOP);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
