// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588.DeepSpaceCode;

import org.usfirst.frc3588.DeepSpaceCode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public JoystickButton retractDoublePistonsButton;
    public JoystickButton retractSinglePistonButton;
    public JoystickButton runPistonMotorFrontInfraredButton;
    public JoystickButton extendDoublePistonsButton;
    public JoystickButton extendSinglePistonButton;
    public Joystick rightJoystick;
    public JoystickButton closeButton;
    public JoystickButton openButton;
    public JoystickButton autonomousSandStormButton;
    public JoystickButton autonomousClimbingButton;
    public Joystick operatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorJoystick = new Joystick(2);
        
        autonomousClimbingButton = new JoystickButton(operatorJoystick, 3);
        autonomousClimbingButton.whenPressed(new AutonomousClimbing());
        autonomousSandStormButton = new JoystickButton(operatorJoystick, 4);
        autonomousSandStormButton.whenPressed(new AutonomousCommand());
        openButton = new JoystickButton(operatorJoystick, 7);
        openButton.whileHeld(new OpenArms());
        closeButton = new JoystickButton(operatorJoystick, 8);
        closeButton.whileHeld(new CloseArms());
        rightJoystick = new Joystick(1);
        
        extendSinglePistonButton = new JoystickButton(rightJoystick, 10);
        extendSinglePistonButton.whenPressed(new ExtendSinglePiston());
        extendDoublePistonsButton = new JoystickButton(rightJoystick, 9);
        extendDoublePistonsButton.whenPressed(new ExtendDoublePistons());
        runPistonMotorFrontInfraredButton = new JoystickButton(rightJoystick, 7);
        runPistonMotorFrontInfraredButton.whenPressed(new RunPistonMotorFrontInfrared());
        retractSinglePistonButton = new JoystickButton(rightJoystick, 12);
        retractSinglePistonButton.whenPressed(new RetractSinglePiston());
        retractDoublePistonsButton = new JoystickButton(rightJoystick, 11);
        retractDoublePistonsButton.whenPressed(new RetractSinglePiston());
        leftJoystick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("CloseArms", new CloseArms());
        SmartDashboard.putData("OpenArms", new OpenArms());
        SmartDashboard.putData("ManualLift", new ManualLift());
        SmartDashboard.putData("RetractDoublePistons", new RetractDoublePistons());
        SmartDashboard.putData("RetractSinglePiston", new RetractSinglePiston());
        SmartDashboard.putData("ExtendDoublePistons", new ExtendDoublePistons());
        SmartDashboard.putData("ExtendSinglePiston", new ExtendSinglePiston());
        SmartDashboard.putData("AutonomousClimbing", new AutonomousClimbing());
        SmartDashboard.putData("RunPistonMotorFrontInfrared", new RunPistonMotorFrontInfrared());
        SmartDashboard.putData("RunPistonMotorBackInfrared", new RunPistonMotorBackInfrared());
        SmartDashboard.putData("DriveAutonomous", new DriveAutonomous());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getleftJoystick() {
        return leftJoystick;
    }

    public Joystick getrightJoystick() {
        return rightJoystick;
    }

    public Joystick getoperatorJoystick() {
        return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

